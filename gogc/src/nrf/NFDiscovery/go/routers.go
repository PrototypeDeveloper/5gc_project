/*
 * NRF NFDiscovery Service
 *
 * NRF NFDiscovery Service.   Â© 2024, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved. 
 *
 * API version: 1.3.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the CompleteStoredSearchDocumentAPI part of the API
	CompleteStoredSearchDocumentAPI CompleteStoredSearchDocumentAPI
	// Routes for the IndividualSCPDomainRoutingInformationSubscriptionDocumentAPI part of the API
	IndividualSCPDomainRoutingInformationSubscriptionDocumentAPI IndividualSCPDomainRoutingInformationSubscriptionDocumentAPI
	// Routes for the NFInstancesStoreAPI part of the API
	NFInstancesStoreAPI NFInstancesStoreAPI
	// Routes for the SCPDomainRoutingInformationDocumentAPI part of the API
	SCPDomainRoutingInformationDocumentAPI SCPDomainRoutingInformationDocumentAPI
	// Routes for the SCPDomainRoutingInformationSubscriptionsCollectionAPI part of the API
	SCPDomainRoutingInformationSubscriptionsCollectionAPI SCPDomainRoutingInformationSubscriptionsCollectionAPI
	// Routes for the StoredSearchDocumentAPI part of the API
	StoredSearchDocumentAPI StoredSearchDocumentAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"RetrieveCompleteSearch",
			http.MethodGet,
			"/nnrf-disc/v1/searches/:searchId/complete",
			handleFunctions.CompleteStoredSearchDocumentAPI.RetrieveCompleteSearch,
		},
		{
			"ScpDomainRoutingInfoUnsubscribe",
			http.MethodDelete,
			"/nnrf-disc/v1/scp-domain-routing-info-subs/:subscriptionID",
			handleFunctions.IndividualSCPDomainRoutingInformationSubscriptionDocumentAPI.ScpDomainRoutingInfoUnsubscribe,
		},
		{
			"SearchNFInstances",
			http.MethodGet,
			"/nnrf-disc/v1/nf-instances",
			handleFunctions.NFInstancesStoreAPI.SearchNFInstances,
		},
		{
			"SCPDomainRoutingInfoGet",
			http.MethodGet,
			"/nnrf-disc/v1/scp-domain-routing-info",
			handleFunctions.SCPDomainRoutingInformationDocumentAPI.SCPDomainRoutingInfoGet,
		},
		{
			"ScpDomainRoutingInfoSubscribe",
			http.MethodPost,
			"/nnrf-disc/v1/scp-domain-routing-info-subs",
			handleFunctions.SCPDomainRoutingInformationSubscriptionsCollectionAPI.ScpDomainRoutingInfoSubscribe,
		},
		{
			"RetrieveStoredSearch",
			http.MethodGet,
			"/nnrf-disc/v1/searches/:searchId",
			handleFunctions.StoredSearchDocumentAPI.RetrieveStoredSearch,
		},
	}
}
